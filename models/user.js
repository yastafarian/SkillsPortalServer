const mongoose = require('mongoose');
const Schema = mongoose.Schema;
/*
  crypto is a node.js library, we are interested in randomBytes to create the
  random salt and pbkdf2Sync to create the hash
*/
const crypto = require('crypto');
const jwt = require('jsonwebtoken');

const UserSchema = new Schema({
  email: {
    type: String,
    required: [true, 'email field is required'],
    lowercase: true,
    unique: true,
    trim: true
  },
  username: {
    type: String,
    required: [true, 'username field is required'],
    lowercase: true,
    unique: true,
    trim: true
  },
  name: {
    type: String,
    required: [true, 'Name field is required']
  },
  /*
    The salt is a string of characters generated and uniques to each user,
    the hash is generated by combining the password provided by the user with
    the salt, creating a one way encryption. As the hash cannot be decrypted,
    the only way to authenticate a user is to take the password, combine it
    with the salt and encrypt it again. If the output of this matches the hash,
    then the password must have been correct.
  */
  hash: String,
  salt: String
});

UserSchema.methods.setPassword = function (password){
  this.salt = crypto.randomBytes(16).toString('hex');
  this.hash = crypto.pbkdf2Sync(password, this.salt, 1000, 64).toString('hex');
};

UserSchema.methods.validPassword = function(password) {
  var hash = crypto.pbkdf2Sync(password, this.salt, 1000, 64).toString('hex');
  return this.hash === hash;
};

// Generate a JWT for 1 week
UserSchema.methods.generateJwt = function() {
  var expiry = new Date();
  expiry.setDate(expiry.getDate() + 7);

  return jwt.sign({
    _id: this._id,
    email: this.email,
    username: this.username,
    name: this.name,
    exp: parseInt(expiry.getTime() / 1000),
  }, process.env.JWT_SECRET);
};

const User = mongoose.model('user', UserSchema);

module.exports = User;
